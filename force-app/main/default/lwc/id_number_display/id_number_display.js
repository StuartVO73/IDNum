import { LightningElement } from "lwc";

const nonDigitRe = /[^0-9]/;

const invalidMarker = "Invalid";

export default class IDNumberDisplay extends LightningElement {
    /*
     Get and validate South African ID Number
     The format is described in https://d7.westerncape.gov.za/general-publication/decoding-your-south-african-id-number-0
     My code was initially inspired by Python code in https://gist.github.com/heetbeet/e319701ee9c27888606bea270a0a35bc
     Note that the latter source apparently generated by ChatGP, something I discovered after noticing that it is often incorrect.
     The actual Luhn checksum code comes from https://medium.com/@sahasuraj420/know-how-to-decode-sa-id-number-before-becoming-south-african-citizen-8cc60bcf6566
    */

    _IDNumStr = "";

    IDComponents = {
        date: "",
        gender: invalidMarker,
        citizenship: invalidMarker,
        length: 0,
        checksumCorrect: false
    };

    validID = false;

    get errorMessage() {
        let fullErrorMessage = [];

        if (nonDigitRe.test(this.IDNum))
            fullErrorMessage.push("Number must not contain any non-digit characters");

        if (this.IDComponents.length !== 13)
            fullErrorMessage.push("Number must be exactly 13 digits long");

        if (this.IDComponents.length >= 6 && this.IDComponents.date === invalidMarker)
            fullErrorMessage.push(
                "Invalid first 6 digits. Must be date in YYMMDD format"
            );

        if (this.IDComponents.length >= 11 && this.IDComponents.citizenship === invalidMarker) {
            fullErrorMessage.push(
                "Invalid citizenship code: Must be 0 or 1"
            );
        }

        if (this.IDComponents.length === 13 && !this.IDComponents.checksumCorrect) {
            fullErrorMessage.push(
                "Invalid checksum digit."
            );
        }

        return fullErrorMessage.join(". ");
    }

    processdate(yy, mm, dd) {

        // By default, use the current century
        let currCentury = Math.trunc(new Date().getFullYear() / 100);
        let ccyy = currCentury + yy;
        mm = parseInt(mm, 10) - 1;
        let idDate = new Date(ccyy, mm, dd);

        // Test if dateStr can be converted into a date
        // Then test if the interpreter hasn't "helpfully" rolled over the month,
        // i.e. 2025/02/29 gets converted to 2025/03/01
        if (isNaN(idDate) ? false : parseInt(mm, 10) === idDate.getMonth()) {
            // "Normalise" date - Make best guess as to the correct century
            if (idDate > new Date()) {
                idDate = new Date(idDate.setFullYear(idDate.getFullYear() - 100));
            }

            this.IDComponents.date =
                idDate.getFullYear() + "-" +
                (idDate.getMonth() + 1).toString().padStart(2, "0") + "-" +
                idDate.getDate().toString().padStart(2, "0");

            return true;
        }
        this.IDComponents.date = invalidMarker;
        return false;
    }

    get IDNum() {
        return this._IDNumStr;
    }

    set IDNum(value) {
        this._IDNumStr = value;

        this.IDComponents.length = value.length;

        this.validID = true;

        if (value.length >= 6) {
            this.processdate(
                this._IDNumStr.substring(0, 2),
                this._IDNumStr.substring(2, 4),
                this._IDNumStr.substring(4, 6)
            );
        } else {
            this.validID = false;
            this.IDComponents.date = invalidMarker;
        }

        if (value.length >= 10) {
            this.IDComponents.gender = value.substring(6, 10) < 5000 ? "Female" : "Male";
        } else {
            this.validID = false;
            this.IDComponents.gender = invalidMarker;
        }

        if (value.length >= 11) {
            switch (value.substring(10, 11)) {
                case "0":
                    this.IDComponents.citizenship = "SA Citizen";
                    break;
                case "1":
                    this.IDComponents.citizenship = "Permanent resident";
                    break;
                default:
                    this.validID = false;
                    this.IDComponents.citizenship = invalidMarker;

            }
        } else {
            this.validID = false;
            this.IDComponents.citizenship = invalidMarker;
        }

        if (value.length === 13) {
            this.IDComponents.checksumCorrect = this.getChecksum(value);
            this.validID = this.IDComponents.checksumCorrect;

        } else {
            this.validID = false;
            this.IDComponents.checksumCorrect = false;
        }
    }

    getChecksum(idNum) {
        let arr = [...idNum];   // We have converted the string into array
        let sum = 0;            // This variable will consists of sum after step 3
        let n = arr.length;
        for (let i = 0; i < n; i++) {
            arr[i] = parseInt(arr[i], 10);  // converting from character to int
        }
        for (let i = 1; i < n; i = i + 2) {   // execution of step 1
            let v = arr[n - 1 - i] * 2;
            if (v > 9) { arr[n - 1 - i] = v - 9; }
            else { arr[n - 1 - i] = v; }
        }
        for (let i = 0; i < n; i++) {    //calculating the step
            sum = sum + arr[i];
        }
        return sum % 10 === 0;
    }

    handleIDChange(event) {
        this.IDNum = event.target.value;

        event.target.setCustomValidity(this.errorMessage);
        event.target.reportValidity();
    }

    handleClick(event) {

    }
}